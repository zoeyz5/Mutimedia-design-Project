
import java.awt.*;
import java.awt.image.*;
import java.io.*;
import javax.swing.*;


public class ImageDisplay {

	JFrame frame;
	JLabel lbIm1;
	JLabel lbIm2;
	BufferedImage imgOne;
	BufferedImage imgTwo;

	static int WIDTH = 1920; // default image width and height
	static int HEIGHT = 1080;

    static int Y;
    static int U;
    static int V;
    static float Sw;
	static float Sh;
	static int A;

	static int imageCopy[] = new int[3*HEIGHT*WIDTH];
    static double yuvImage[] = new double[3*HEIGHT*WIDTH];

	/** Read Image RGB
	 *  Reads the image of given width and height at the given imgPath into the provided BufferedImage.
	 */
	private void readImageRGB(int width, int height, String imgPath, BufferedImage img)
	{
		try
		{
			int frameLength = width*height*3;

			File file = new File(imgPath);
			RandomAccessFile raf = new RandomAccessFile(file, "r");
			raf.seek(0);

			long len = frameLength;
			byte[] bytes = new byte[(int) len];

			raf.read(bytes);

			int ind = 0;
			for(int y = 0; y < height; y++)
			{
				for(int x = 0; x < width; x++)
				{
					byte a = 0;
					byte r = bytes[ind];
					byte g = bytes[ind+height*width];
					byte b = bytes[ind+height*width*2]; 

					//convert to YUV
					double changedY = RGBtoY(imageCopy[(y*width + x)*3], imageCopy[(y*width + x)*3 + 1], imageCopy[(y*width + x)*3 + 2]);
					yuvImage[(y*width + x)*3] = changedY;
					
					double changedU = RGBtoU(imageCopy[(y*width + x)*3], imageCopy[(y*width + x)*3 + 1], imageCopy[(y*width + x)*3 + 2]);
					yuvImage[(y*width + x)*3+1] = changedU;
					
					double changedV = RGBtoV(imageCopy[(y*width + x)*3], imageCopy[(y*width + x)*3 + 1], imageCopy[(y*width + x)*3 + 2]);
					yuvImage[(y*width + x)*3+2] = changedV;

					int pix = 0xff000000 | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
					//int pix = ((a << 24) + (r << 16) + (g << 8) + b);
					img.setRGB(x,y,pix);
					ind++;
				}
			}
		}
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}

	public void showIms(String[] args){

		// Read a parameter from command line
		Y = Integer.parseInt(args[1]);
		U = Integer.parseInt(args[2]);
		V = Integer.parseInt(args[3]);
		Sw = Float.parseFloat(args[4]);
		Sh = Float.parseFloat(args[5]);
		A = Integer.parseInt(args[6]);

		// Read in the specified image
		imgOne = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		readImageRGB(WIDTH, HEIGHT, args[0], imgOne);

		imgTwo = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		for(int y = 0; y < HEIGHT; y++){
           
			for(int x = 0; x < WIDTH; x++){
				
				int i = y*WIDTH + x;
				
				byte r, g, b;
				//calculate rgb value from yuv value
				//take round
				//then eliminate data that smaller than 0 or larger than 255
				imageCopy[3*i] = (int)Math.rint(YUVtoR(yuvImage[3*i], yuvImage[3*i+1], yuvImage[3*i+2]));
				if(imageCopy[3*i] < 0) {
					imageCopy[3*i] = 0;
				} else if(imageCopy[3*i] > 255) {
					imageCopy[3*i] = 255;
				}
				
				imageCopy[3*i +1] = (int)Math.rint(YUVtoG(yuvImage[3*i], yuvImage[3*i+1], yuvImage[3*i+2]));
				if(imageCopy[3*i + 1] < 0) {
					imageCopy[3*i + 1] = 0;
				} else if(imageCopy[3*i + 1] > 255) {
					imageCopy[3*i + 1] = 255;
				}
				
				imageCopy[3*i +2] = (int)Math.rint(YUVtoB(yuvImage[3*i], yuvImage[3*i+1], yuvImage[3*i+2]));
				if(imageCopy[3*i + 2] < 0) {
					imageCopy[3*i + 2] = 0;
				} else if(imageCopy[3*i + 2] > 255) {
					imageCopy[3*i + 2] = 255;
				}
		
				//note here we need transform int data 0-255
				//to byte data which is -128 to 127
				if(imageCopy[3*i] > 127) {
					r = (byte)(imageCopy[3*i] - 256);
				} else {
					r = (byte)imageCopy[3*i];
				}
				
				if(imageCopy[3*i + 1] > 127) {
					g = (byte)(imageCopy[3*i + 1] - 256);
				} else {
					g = (byte)imageCopy[3*i + 1];
				}
				
				if(imageCopy[3*i + 2] > 127) {
					b = (byte)(imageCopy[3*i + 2] - 256);
				} else {
					b = (byte)imageCopy[3*i + 2];
				}
				
				//set pixel for display output image
				int pix = 0xff000000 | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
				imgTwo.setRGB(x,y,pix);
			}
		}

		// Use label to display the image
		frame = new JFrame();
		GridBagLayout gLayout = new GridBagLayout();
		frame.getContentPane().setLayout(gLayout);

		lbIm1 = new JLabel(new ImageIcon(imgOne));
		lbIm2 = new JLabel(new ImageIcon(imgTwo));

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.anchor = GridBagConstraints.CENTER;
		c.weightx = 0.5;
		c.gridx = 0;
		c.gridy = 0;

		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 1;
		frame.getContentPane().add(lbIm1, c);

		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 1;
		c.gridy = 1;
		frame.getContentPane().add(lbIm2, c);

		frame.pack();
		frame.setVisible(true);
	}

	public static void subSample() {
        for(int y = 0; y < HEIGHT; y++){
            if(Y > 1) {
                int x;
                for(x = 0; x < WIDTH - Y; x+=Y){
                    //set values between x to x+Y to be the average of two
                    //remained values
                    for(int z=x+1; z<x+Y; z++) {
                        yuvImage[3*(WIDTH*y + z)] = (yuvImage[3*(WIDTH*y + x)] + yuvImage[3*(WIDTH*y + x+Y)])/2;
                    }
                }
                x++;
                //note here for the last period of values
                //we set them to be the start remained value
                for(;x<WIDTH; x++) {
                    yuvImage[3*(WIDTH*y + x)] = yuvImage[3*(WIDTH*y + WIDTH - Y)];
                }
            }
            
            if(U > 1) {
                int x;
                for(x = 0; x < WIDTH - U; x+=U){
                    for(int z=x+1; z<x+U; z++) {
                        yuvImage[3*(WIDTH*y + z) + 1] = (yuvImage[3*(WIDTH*y + x) + 1] + yuvImage[3*(WIDTH*y + x+U) + 1])/2;
                    }
                }
                x++;
                for(;x<WIDTH; x++) {
                    yuvImage[3*(WIDTH*y + x) + 1] = yuvImage[3*(WIDTH*y + WIDTH - U) + 1];
                }
            }
            
            if(Y > 1) {
                int x;
                for(x = 0; x < WIDTH - V; x+=V){
                    for(int z=x+1; z<x+V; z++) {
                        yuvImage[3*(WIDTH*y + z) + 2] = (yuvImage[3*(WIDTH*y + x) + 2] + yuvImage[3*(WIDTH*y + x+V) + 2])/2;
                    }
                }
                x++;
                for(;x<WIDTH; x++) {
                    yuvImage[3*(WIDTH*y + x) + 2] = yuvImage[3*(WIDTH*y + WIDTH - V) + 2];
                }
            }
        }
    }

	public static double RGBtoY(int r, int g, int b) {

		return (0.299*r + 0.587*g + 0.114*b);
	}

	public static double RGBtoU(int r, int g, int b) {
        return (0.436*b - (0.147*r) - (0.289*g));
    }

	public static double RGBtoV(int r, int g, int b) {

        return (0.615*r - (0.515*g) - (0.100*b));
    }

	public static double YUVtoR(double y, double u, double v){
        return (0.999*y + 1.140*v);
    }
    
	public static double YUVtoG(double y, double u, double v) {
        return (y - 0.395*u - 0.581*v);
    }

	public static double YUVtoB(double y, double u, double v) {
        return (y + 2.032*u);
    }
    

	public static void main(String[] args) {
		ImageDisplay ren = new ImageDisplay();
		ren.showIms(args);
	}

}
